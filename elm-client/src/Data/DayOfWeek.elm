{-
   
   No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

   OpenAPI spec version: 
   

   NOTE: This file is auto generated by the swagger code generator program.
   https://github.com/swagger-api/swagger-codegen.git
   Do not edit this file manually.
-}


module Data.DayOfWeek exposing (DayOfWeek(..), dayOfWeekDecoder, dayOfWeekEncoder)

import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode
import Maybe exposing (map, withDefault)


type DayOfWeek
    = Sunday
    | Monday
    | Tuesday
    | Wednesday
    | Thursday
    | Friday
    | Saturday



dayOfWeekDecoder : Decoder DayOfWeek
dayOfWeekDecoder =
    Decode.string
        |> Decode.andThen (\str ->
            case str of
                "Sunday" ->
                    Decode.succeed Sunday

                "Monday" ->
                    Decode.succeed Monday

                "Tuesday" ->
                    Decode.succeed Tuesday

                "Wednesday" ->
                    Decode.succeed Wednesday

                "Thursday" ->
                    Decode.succeed Thursday

                "Friday" ->
                    Decode.succeed Friday

                "Saturday" ->
                    Decode.succeed Saturday

                other ->
                    Decode.fail <| "Unknown type: " ++ other
        )


dayOfWeekEncoder : DayOfWeek -> Encode.Value
dayOfWeekEncoder model =
    case model of
        Sunday ->
            Encode.string "Sunday"

        Monday ->
            Encode.string "Monday"

        Tuesday ->
            Encode.string "Tuesday"

        Wednesday ->
            Encode.string "Wednesday"

        Thursday ->
            Encode.string "Thursday"

        Friday ->
            Encode.string "Friday"

        Saturday ->
            Encode.string "Saturday"


